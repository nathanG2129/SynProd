# Production Docker Compose configuration for SynProd
# This configuration orchestrates the complete application stack for local network deployment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: synprod_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-synprod}
      POSTGRES_USER: ${POSTGRES_USER:-synprod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - synprod_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-synprod} -d ${POSTGRES_DB:-synprod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: synprod_backend_prod
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-synprod}
      DATABASE_USERNAME: ${POSTGRES_USER:-synprod}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      
      # Email Configuration
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      
      # Application Configuration
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:4200}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:4200}
      
      # User Passwords
      APP_ADMIN_PASSWORD: ${APP_ADMIN_PASSWORD}
      APP_MANAGER_PASSWORD: ${APP_MANAGER_PASSWORD}
      
      # Logging
      LOG_FILE_PATH: /var/log/synprod/application.log
      
      # JVM Configuration
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    ports:
      - "0.0.0.0:8080:8080"
    volumes:
      - backend_logs:/var/log/synprod
    networks:
      - synprod_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Reverse Proxy and Frontend Server
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: synprod_nginx_prod
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"  # For future SSL support
    volumes:
      - ./nginx/html:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
      # Uncomment for SSL support
      # - ./ssl:/etc/nginx/ssl:ro
    networks:
      - synprod_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Optional: Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: synprod_backup_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-synprod}
      POSTGRES_USER: ${POSTGRES_USER:-synprod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - synprod_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - backup
    command: >
      sh -c "
        echo 'Backup service ready. Run: docker-compose -f docker-compose.prod.yml exec backup /backup.sh'
        tail -f /dev/null
      "

# Networks
networks:
  synprod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/backend
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx
